---
import "./Experience.css";
const { title, description, time, technologies = [] } = Astro.props;
const maxChars = 250; // Límite de caracteres antes de mostrar "Ver más"
---

<div class="experience">
  <!--Tiempo de duracion de la experiencia -->
  <p class="p_date"><b>│ </b>{time}</p>

  <!--Titulo de la experiencia -->
  <h1>{title}</h1>

  <!--Descripcion de la experiencia -->
  <!-- <p class="p_description">{description}</p> -->
  <!-- Descripción con botón "Ver más" -->
  <p class="p_description">
    <span class="short">{description.slice(0, maxChars)}...</span>
    <span class="full hidden">{description}</span>
    {
      description.length > maxChars && (
        <button class="p_boton_ver boton">
          Ver más
        </button>
      )
    }
  </p>

  <!--Habilidades utilizadas -->
  <div class="tech-container">
    {
      technologies.map((tech: string) => {
        return <span class="tech-badge">{tech}</span>;
      })
    }
  </div>
</div>

<!-- Script con TypeScript para manejar la interactividad de ver mas -->
<script>
    document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll(".boton").forEach(button => {
      button.addEventListener("click", () => {
        const container = button.closest(".p_description"); // Asegura que obtiene el contenedor correcto
        if (!container) return; // Evita errores si container es null

        const shortText = container.querySelector(".short");
        const fullText = container.querySelector(".full");

        if (!shortText || !fullText) return; // Evita errores si los elementos no existen

        if (fullText.classList.contains("hidden")) {
          shortText.classList.add("hidden");
          fullText.classList.remove("hidden");
          button.textContent = "Ver menos";
        } else {
          shortText.classList.remove("hidden");
          fullText.classList.add("hidden");
          button.textContent = "Ver más";
        }
      });
    });
  });
</script>